source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_11.R", echo=TRUE)
#idea? Use the principal function to extract and rotate PCs...
install.packages("psych")
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_11.R", echo=TRUE)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_11.R", echo=TRUE)
View(thescores)
View(thescores)
print(test1)
print(theload)
print(thescores)
MLFA=factanal(sub.pen.data, 1, rotation = "varimax")
#factors above 1 has factor error as being too many, a possible degree of freedom problem?
print(MLFA)
#try factor 1 by factor 2
load2=sub.pen.data$loadings [,1:2] #empty
plot(load2)
print(load2)
View(sub.pen.data)
print(PCnum)
View(PCnum)
print(PCA1111)
print(theload)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_12.R", echo=TRUE)
#determining the number of factors to extract
install.packages("nFactors")
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_13.r", echo=TRUE)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_10B.R", echo=TRUE)
theANCOVA3= summary(test3)
test3=aov(formula=BM~CD*CL, data=data.na.out2)
test4=aov(formula=Sp.int~CD*CL, data=data.na.out2)
theANCOVA3= summary(test3)
theANCOVA4= summary(test4)
print(theANCOVA3)
print(theANCOVA4)
test2=aov(formula=CL~CD*FL, data=data.na.out2)
theANCOVA2= summary(test2)
print(theANCOVA2)
test2=aov(formula=Sp.int~CD*FL, data=data.na.out2)
theANCOVA2= summary(test2)
print(theANCOVA2)
test2=aov(formula=Sp.int~CD*FL, data=data.na.out2)
test5=aov(formula=BM~CD*FL, data=data.na.out2)
theANCOVA5= summary(test5)
print(theANCOVA5)
test2=aov(formula=Sp.int~CD*CL+FL, data=data.na.out2)
theANCOVA2= summary(test2)
print(theANCOVA2)
test3=aov(formula=BM~CD*CL+FL, data=data.na.out2)
theANCOVA3= summary(test3)
print(theANCOVA3)
test4=aov(formula=Sp.int~CD*CL+FL+BM, data=data.na.out2)
theANCOVA4= summary(test4)
print(theANCOVA4)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_11.R", echo=TRUE)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_12.R", echo=TRUE)
#define min-max normalization
min_max_norm = function(x) {
(x-min(x))/(max(x)-min(x))
}
#set normalize dataframe
norm.data=as.data.fram(lapply(sub.pen.data, min_max_norm))
head(norm.data)
#set normalize dataframe
norm.data=as.data.frame(lapply(sub.pen.data, min_max_norm))
head(norm.data)
#aov test
# test1=aov(formula = CL~CD*BM, data=data.na.out2)
# test2=aov(formula=Sp.int~CD*CL+FL, data=data.na.out2)
# test3=aov(formula=BM~CD*CL+FL, data=data.na.out2)
test4=aov(formula=Sp.int~CD*CL+FL+BM, data=norm.data)
#set normalize dataframe
norm.data=as.data.frame(Sp.int$data.na.out2, lapply(sub.pen.data, min_max_norm))
#set normalize dataframe
norm.data=as.data.frame(data.na.out2$Sp.int, lapply(sub.pen.data, min_max_norm))
head(norm.data)
#add Species
norm.data.sp=cbind(data.na.out2$Sp.int, norm.data)
head(norm.data.sp)
#add Species
norm.data.sp=data.na.out2$Species
head(norm.data.sp)
#add Species
norm.data$Species=data.na.out2$Species
