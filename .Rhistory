source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_11.R", echo=TRUE)
#idea? Use the principal function to extract and rotate PCs...
install.packages("psych")
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_11.R", echo=TRUE)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_11.R", echo=TRUE)
View(thescores)
View(thescores)
print(test1)
print(theload)
print(thescores)
MLFA=factanal(sub.pen.data, 1, rotation = "varimax")
#factors above 1 has factor error as being too many, a possible degree of freedom problem?
print(MLFA)
#try factor 1 by factor 2
load2=sub.pen.data$loadings [,1:2] #empty
plot(load2)
print(load2)
View(sub.pen.data)
print(PCnum)
View(PCnum)
print(PCA1111)
print(theload)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_12.R", echo=TRUE)
#determining the number of factors to extract
install.packages("nFactors")
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_13.r", echo=TRUE)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_10B.R", echo=TRUE)
theANCOVA3= summary(test3)
test3=aov(formula=BM~CD*CL, data=data.na.out2)
test4=aov(formula=Sp.int~CD*CL, data=data.na.out2)
theANCOVA3= summary(test3)
theANCOVA4= summary(test4)
print(theANCOVA3)
print(theANCOVA4)
test2=aov(formula=CL~CD*FL, data=data.na.out2)
theANCOVA2= summary(test2)
print(theANCOVA2)
test2=aov(formula=Sp.int~CD*FL, data=data.na.out2)
theANCOVA2= summary(test2)
print(theANCOVA2)
test2=aov(formula=Sp.int~CD*FL, data=data.na.out2)
test5=aov(formula=BM~CD*FL, data=data.na.out2)
theANCOVA5= summary(test5)
print(theANCOVA5)
test2=aov(formula=Sp.int~CD*CL+FL, data=data.na.out2)
theANCOVA2= summary(test2)
print(theANCOVA2)
test3=aov(formula=BM~CD*CL+FL, data=data.na.out2)
theANCOVA3= summary(test3)
print(theANCOVA3)
test4=aov(formula=Sp.int~CD*CL+FL+BM, data=data.na.out2)
theANCOVA4= summary(test4)
print(theANCOVA4)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_11.R", echo=TRUE)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_12.R", echo=TRUE)
#define min-max normalization
min_max_norm = function(x) {
(x-min(x))/(max(x)-min(x))
}
#set normalize dataframe
norm.data=as.data.fram(lapply(sub.pen.data, min_max_norm))
head(norm.data)
#set normalize dataframe
norm.data=as.data.frame(lapply(sub.pen.data, min_max_norm))
head(norm.data)
#aov test
# test1=aov(formula = CL~CD*BM, data=data.na.out2)
# test2=aov(formula=Sp.int~CD*CL+FL, data=data.na.out2)
# test3=aov(formula=BM~CD*CL+FL, data=data.na.out2)
test4=aov(formula=Sp.int~CD*CL+FL+BM, data=norm.data)
#set normalize dataframe
norm.data=as.data.frame(Sp.int$data.na.out2, lapply(sub.pen.data, min_max_norm))
#set normalize dataframe
norm.data=as.data.frame(data.na.out2$Sp.int, lapply(sub.pen.data, min_max_norm))
head(norm.data)
#add Species
norm.data.sp=cbind(data.na.out2$Sp.int, norm.data)
head(norm.data.sp)
#add Species
norm.data.sp=data.na.out2$Species
head(norm.data.sp)
#add Species
norm.data$Species=data.na.out2$Species
source("C:/Users/Videosystem/AppData/Local/Temp/Temp1_BIOL672unit1-main (2).zip/BIOL672unit1-main/IrwinMavis_unit1_part_12.R", echo=TRUE)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_11.R", echo=TRUE)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_13.r", echo=TRUE)
PZ=(CL+CD+FL+PW)/4
PZ=(CL+CD+FL+BM)/4
print(PZ)
#set GMM and EM
fitGMM= normalmixEM(SZ)
library("mixtools")
#set GMM and EM
fitGMM= normalmixEM(SZ)
#set GMM and EM
fitGMM= normalmixEM(PZ)
print(fitGMM)
View(fitGMM)
View(fitGMM)
library("MASS")
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_14.r", echo=TRUE)
#Prepare dataframes
penguin.data=data.frame(Sp, CL,CD,FL,BM)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_14.r", echo=TRUE)
print(fitNORM)
print(fitLNORM)
#the choice: exponential?
fitEXP <- fitdistr(PZ, densfun="exponential")
print(fitEXP)
#GMM
fitGMM <- normalmixEM(PZ)
print(fitGMM)
print(fitEXP)
#the choice: exponential?
fitEXP <- fitdistr(PZ, densfun="gamma")
print(fitEXP)
#plot the four models
print ("BIC for GMM")
print(BIC_GMM)
plot1141 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dnorm, color="red", args=list(mean = fitNORM$estimate[1], sd = fitNORM$estimate[2]))
plot1142 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dlnorm, color="red", args=list(meanlog = fitLNORM$estimate[1], sdlog = fitLNORM$estimate[2]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1144 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=2*(..density..))) + geom_density(aes(y=2*(..density..))) + stat_function(fun=dnorm, color="red", args=list(mean = fitGMM$mu[1], sd = fitGMM$sigma[1])) + stat_function(fun=dnorm, color="blue", args=list(mean = fitGMM$mu[2], sd = fitGMM$sigma[2]))
library('grid')
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1141, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(plot1142, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(plot1144, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
#save
#the choice: exponential, gamma,
fitEXP <- fitdistr(PZ, densfun="cauchy")
print(fitEXP)
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
fitEXP <- fitdistr(PZ, densfun="cauchy")
print(fitEXP)
#GMM
fitGMM <- normalmixEM(PZ)
print(fitGMM)
#BIC setup
fitGMM_loglik <- fitGMM$loglik
BIC_GMM <- -2*fitGMM_loglik+4*log(150)
BICfit <- BIC(fitNORM,fitLNORM,fitEXP)
print(BICfit)
note1=cat("")
#plot the four models
print ("BIC for GMM")
print(BIC_GMM)
plot1141 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dnorm, color="red", args=list(mean = fitNORM$estimate[1], sd = fitNORM$estimate[2]))
plot1142 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dlnorm, color="red", args=list(meanlog = fitLNORM$estimate[1], sdlog = fitLNORM$estimate[2]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1144 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=2*(..density..))) + geom_density(aes(y=2*(..density..))) + stat_function(fun=dnorm, color="red", args=list(mean = fitGMM$mu[1], sd = fitGMM$sigma[1])) + stat_function(fun=dnorm, color="blue", args=list(mean = fitGMM$mu[2], sd = fitGMM$sigma[2]))
library('grid')
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1141, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(plot1142, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(plot1144, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
#save
# sink("stats.txt")
# print(fitGMM)
# print(BICfit)
# print ("BIC for GMM")
# print(BIC_GMM)
# sink()
#the choice: exponential, gamma, cauchy,
fitEXP <- fitdistr(PZ, densfun="weibull")
print(fitEXP)
#GMM
fitGMM <- normalmixEM(PZ)
print(fitGMM)
#BIC setup
fitGMM_loglik <- fitGMM$loglik
BIC_GMM <- -2*fitGMM_loglik+4*log(150)
BICfit <- BIC(fitNORM,fitLNORM,fitEXP)
print(BICfit)
note1=cat("")
#plot the four models
print ("BIC for GMM")
print(BIC_GMM)
plot1141 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dnorm, color="red", args=list(mean = fitNORM$estimate[1], sd = fitNORM$estimate[2]))
plot1142 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dlnorm, color="red", args=list(meanlog = fitLNORM$estimate[1], sdlog = fitLNORM$estimate[2]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1144 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=2*(..density..))) + geom_density(aes(y=2*(..density..))) + stat_function(fun=dnorm, color="red", args=list(mean = fitGMM$mu[1], sd = fitGMM$sigma[1])) + stat_function(fun=dnorm, color="blue", args=list(mean = fitGMM$mu[2], sd = fitGMM$sigma[2]))
library('grid')
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1141, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(plot1142, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(plot1144, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
#save
# sink("stats.txt")
# print(fitGMM)
# print(BICfit)
# print ("BIC for GMM")
# print(BIC_GMM)
# sink()
fitEXP <- fitdistr(PZ, densfun="normal")
print(fitEXP)
#GMM
fitGMM <- normalmixEM(PZ)
print(fitGMM)
#BIC setup
fitGMM_loglik <- fitGMM$loglik
BIC_GMM <- -2*fitGMM_loglik+4*log(150)
BICfit <- BIC(fitNORM,fitLNORM,fitEXP)
print(BICfit)
note1=cat("")
#plot the four models
print ("BIC for GMM")
print(BIC_GMM)
plot1141 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dnorm, color="red", args=list(mean = fitNORM$estimate[1], sd = fitNORM$estimate[2]))
plot1142 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dlnorm, color="red", args=list(meanlog = fitLNORM$estimate[1], sdlog = fitLNORM$estimate[2]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1144 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=2*(..density..))) + geom_density(aes(y=2*(..density..))) + stat_function(fun=dnorm, color="red", args=list(mean = fitGMM$mu[1], sd = fitGMM$sigma[1])) + stat_function(fun=dnorm, color="blue", args=list(mean = fitGMM$mu[2], sd = fitGMM$sigma[2]))
library('grid')
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1141, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(plot1142, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(plot1144, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
#save
# sink("stats.txt")
# print(fitGMM)
# print(BICfit)
# print ("BIC for GMM")
# print(BIC_GMM)
# sink()
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_14.r", echo=TRUE)
source("~/GitHub/BIOL672unit1/IrwinMavis_unit1_part_14.r", echo=TRUE)
#the choice: exponential, gamma (flat), cauchy (flat), weibull (flat)
#normal is flat as well, reboot app
fitEXP <- fitdistr(PZ, densfun="normal")
print(fitEXP)
#GMM
fitGMM <- normalmixEM(PZ)
print(fitGMM)
#BIC setup
fitGMM_loglik <- fitGMM$loglik
BIC_GMM <- -2*fitGMM_loglik+4*log(150)
BICfit <- BIC(fitNORM,fitLNORM,fitEXP)
print(BICfit)
note1=cat("")
#plot the four models
print ("BIC for GMM")
print(BIC_GMM)
plot1141 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dnorm, color="red", args=list(mean = fitNORM$estimate[1], sd = fitNORM$estimate[2]))
plot1142 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dlnorm, color="red", args=list(meanlog = fitLNORM$estimate[1], sdlog = fitLNORM$estimate[2]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1144 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=2*(..density..))) + geom_density(aes(y=2*(..density..))) + stat_function(fun=dnorm, color="red", args=list(mean = fitGMM$mu[1], sd = fitGMM$sigma[1])) + stat_function(fun=dnorm, color="blue", args=list(mean = fitGMM$mu[2], sd = fitGMM$sigma[2]))
library('grid')
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1141, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(plot1142, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(plot1144, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
#save
# sink("stats.txt")
# print(fitGMM)
# print(BICfit)
# print ("BIC for GMM")
# print(BIC_GMM)
# sink()
#the choice: exponential, gamma (flat), cauchy (flat), weibull (flat)
#normal is flat as well. Something is up.
fitEXP <- fitdistr(PZ, densfun="cauchy")
print(fitEXP)
print(fitLNORM)
print(fitNORM)
print(fitGMM)
#the choice: exponential, gamma (flat), cauchy (flat), weibull (flat)
#normal is flat as well. Something is up.
fitEXP <- fitdistr(PZ, densfun="exponential")
print(fitEXP)
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(location = fitEXP$estimate[1], scale= fitEXP$estimate[2]))
#the choice: exponential, gamma (flat), cauchy (flat), weibull (flat)
#normal is flat as well. Something is up.
fitEXP <- fitdistr(PZ, densfun="cauchy")
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(location = fitEXP$estimate[1], scale= fitEXP$estimate[2]))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
#the choice: exponential, gamma (flat), cauchy (location, scale), weibull (flat)
#normal is flat as well. Something is up.
fitEXP <- fitdistr(PZ, densfun="gamma")
print(fitEXP)
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(shape = fitEXP$estimate[1], rate= fitEXP$estimate[2]))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
#the choice: exponential(rate), gamma (shape, rate), cauchy (location, scale), weibull ()
#normal is flat as well. Something is up.
fitEXP <- fitdistr(PZ, densfun="weibull")
print(fitEXP)
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(scale = fitEXP$estimate[1]))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(shape= fitEXP$estimate[1]))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
#the choice: exponential(rate), gamma (shape, rate, dgamma), cauchy (location, scale), weibull (shape, scale)
#I have tried changing the plot's names to match what I tried. Seemingly something is up, even after rebooting.
fitTEST <- fitdistr(PZ, densfun="gamma")
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dgamma, color="red", args=list(rate= fitEXP$estimate[1]))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dgamma, color="red", args=list(rate= fitTEST$estimate[1]))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dgamma, color="red", args=list(shape= fitTEST$estimate[1]))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
plot1141 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=2*(..density..))) + geom_density() + stat_function(fun=dnorm, color="red", args=list(mean = fitNORM$estimate[1], sd = fitNORM$estimate[2]))
print(plot1141, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
plot1142 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dlnorm, color="red", args=list(meanlog = fitLNORM$estimate[1], sdlog = fitLNORM$estimate[2]))
print(plot1142, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print ("BIC for GMM")
print(BIC_GMM)
plot1141 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=2*(..density..))) + geom_density() + stat_function(fun=dnorm, color="red", args=list(mean = fitNORM$estimate[1], sd = fitNORM$estimate[2]))
plot1142 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dlnorm, color="red", args=list(meanlog = fitLNORM$estimate[1], sdlog = fitLNORM$estimate[2]))
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dgamma, color="red", args=list(shape= fitTEST$estimate[1]))
# plot1143 problem with gamma: "`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
plot1144 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=2*(..density..))) + geom_density(aes(y=2*(..density..))) + stat_function(fun=dnorm, color="red", args=list(mean = fitGMM$mu[1], sd = fitGMM$sigma[1])) + stat_function(fun=dnorm, color="blue", args=list(mean = fitGMM$mu[2], sd = fitGMM$sigma[2]))
library('grid')
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1141, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(plot1142, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(plot1144, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
note1=cat("I like GMM best for its two groupings, which kind of makes sense ")
#save
# sink("stats.txt")
# print(fitGMM)
# print(BICfit)
# print ("BIC for GMM")
# print(BIC_GMM)
# sink()
fitNORM <- fitdistr(PZ, densfun="normal")
print(fitNORM)
#lognormal
fitLNORM <- fitdistr(PZ, densfun="log-normal")
print(fitLNORM)
#played with: exponential(rate; dexp), gamma (shape, rate; dgamma?), cauchy (location, scale, dcauchy?), weibull (shape, scale, dweibell?)
fitTEST <- fitdistr(PZ, densfun="gamma")
print(fitTEST)
#GMM
fitGMM <- normalmixEM(PZ)
print(fitGMM)
#BIC setup
fitGMM_loglik <- fitGMM$loglik
BIC_GMM <- -2*fitGMM_loglik+4*log(150)
BICfit <- BIC(fitNORM,fitLNORM,fitTEST)
print(BICfit)
#plot the four models
#NOTE plotting problem: "`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
print ("BIC for GMM")
print(BIC_GMM)
plot1141 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dnorm, color="red", args=list(mean = fitNORM$estimate[1], sd = fitNORM$estimate[2]))
plot1142 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dlnorm, color="red", args=list(meanlog = fitLNORM$estimate[1], sdlog = fitLNORM$estimate[2]))
#plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dexp, color="red", args=list(rate = fitEXP$estimate[1]))
plot1143 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=..density..)) + geom_density() + stat_function(fun=dgamma, color="red", args=list(shape= fitTEST$estimate[1]))
plot1144 <-ggplot(penguin.data, aes(x=PZ)) + geom_histogram(aes(y=2*(..density..))) + geom_density(aes(y=2*(..density..))) + stat_function(fun=dnorm, color="red", args=list(mean = fitGMM$mu[1], sd = fitGMM$sigma[1])) + stat_function(fun=dnorm, color="blue", args=list(mean = fitGMM$mu[2], sd = fitGMM$sigma[2]))
library('grid')
pushViewport(viewport(layout = grid.layout(2, 2)))
print(plot1141, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(plot1142, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(plot1143, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(plot1144, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
note1=cat("I like GMM best for showing a possible two grouping distributions.")
#save
# sink("stats.txt")
# print(fitGMM)
# print(BICfit)
# print ("BIC for GMM")
# print(BIC_GMM)
# sink()
